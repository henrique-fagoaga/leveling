Deadly Diamond of Death tem esse nome pela representação do diagrama de classe que apresenta uma estrutura hierárquica entre classes que podem gerar conflitos e ambiguidade proveniente da herança múltipla.
O problema apresentado é que uma classe base A pode ter uma implementação em que é herdado por duas classes filhas, B e C. Por sua vez, se tivermos uma outra classe D que herda simultaneamente B e C, se tentarmos acessar algum método de uma das superclasses, qual deveria ser utilizado?
Mesmo que B e C mantenham a implementação original da classe A, cada um deles possuirá uma referência própria à implementação original, e no momento de rodar o programa o compilador terá de decidir implícitamente um critério de seleção ou levantará uma exceção por conta da ambiguidade da declaração dos métodos.
Algumas linguagens já resolvem essa questão com estratégias como "mixins" e "classes virutais".
No final, é sempre uma boa prática evitar ambiguidade entre métodos e atributos quando formos utilizar hierarquia múltipla, delimitar bem o domínio de cada classe mãe e manter é coesão de cada modelagem é um ponto em que devemos investir tempo em fazer bem para evitar problemas como esse.